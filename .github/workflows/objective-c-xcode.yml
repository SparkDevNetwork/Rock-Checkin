name: "Build iOS app"

on:
  workflow_dispatch:

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.0

      - name: Install certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          #ls -l ~/Library/MobileDevice/Provisioning\ Profiles

          #echo "Certificate Identity:"
          #security find-identity -v -p codesigning $KEYCHAIN_PATH | grep -o '".*"' | tr -d '"'

          #echo "Provisioning Proviles:"
          for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
              # Extracting and displaying some key information from the provisioning profile
              #echo "Profile:"
              PROFILE_NAME=$(security cms -D -i "$profile" | plutil -extract Name xml1 -o - - | xmllint --xpath 'string(//string)' -)
              #security cms -D -i "$profile" | plutil -extract TeamName xml1 -o - - | xmllint --format -
              #security cms -D -i "$profile" | plutil -extract UUID xml1 -o - - | xmllint --format -
          done

          echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV

      - name: Get Timestamp
        id: timestamp
        shell: bash
        run: echo TIMESTAMP=`date +%s` >> $GITHUB_ENV

      - name: Update Build Number
        uses: damienaicheh/update-ios-version-info-plist-action@v1.2.0
        with:
          info-plist-path: "./ios/RockCheckin/RockCheckin-Info.plist"
          bundle-version: "${{ env.TIMESTAMP }}"
          print-file: true

      - name: Build Archive
        run: |
          cd ios
          xcodebuild -scheme "RockCheckin" \
            -archivePath $RUNNER_TEMP/rockcheckin.xcarchive \
            -sdk iphoneos \
            -configuration Release \
            -destination generic/platform=iOS \
            clean archive \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="${{ env.PROFILE_NAME }}"

      - name: Export IPA
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          cd ios
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/rockcheckin.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build
          ls -l $RUNNER_TEMP/build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app
          if-no-files-found: error
          path: "${{ runner.temp }}/build/Rock Check-in.ipa"
          retention-days: 3
